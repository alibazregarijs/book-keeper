generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  avatar      String
  email       String    @unique
  password    String
  createdAt   DateTime  @default(now())
  books       Book[]    // One-to-Many relationship: A user can have many books
  bookLikes   BookLike[] 
  savedBooks  SaveBook[] 
  bookViews   BookViews[] 
  comments    Comment[] // Reverse relation for Comment
}

model Book {
  id          Int        @id @default(autoincrement())
  title       String
  genre       String
  pageCount   Int
  description String
  userId      Int        // Foreign key to associate with User
  user        User       @relation(fields: [userId], references: [id]) // Relation setup
  imageUrl    String
  likes       BookLike[] 
  savedBy     SaveBook[] 
  bookViews   BookViews[] 
  comments    Comment[]  // Reverse relation for Comment
}

model BookLike {
  id          Int      @id @default(autoincrement())
  userId      Int      // Foreign key to associate with User
  user        User     @relation(fields: [userId], references: [id]) // Relation setup
  bookId      Int      // Foreign key to associate with Book
  book        Book     @relation(fields: [bookId], references: [id]) 
  countOfLike Int
  isLiked     Boolean  @default(false)
  @@unique([userId, bookId])
}

model SaveBook {
  id          Int      @id @default(autoincrement())
  userId      Int      // Foreign key to associate with User
  user        User     @relation(fields: [userId], references: [id]) // Relation setup
  bookId      Int      // Foreign key to associate with Book
  book        Book     @relation(fields: [bookId], references: [id]) 
  isSaved     Boolean  @default(false)
  @@unique([userId, bookId])
}

model BookViews {
  id          Int      @id @default(autoincrement())
  userId      Int      // Foreign key to associate with User
  user        User     @relation(fields: [userId], references: [id]) // Relation setup
  bookId      Int      // Foreign key to associate with Book
  book        Book     @relation(fields: [bookId], references: [id]) 
  views       Int
  @@unique([userId, bookId])
}

model Comment {
  id          Int       @id @default(autoincrement())
  content     String    // Comment content
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int       // Foreign key to associate with User
  user        User      @relation(fields: [userId], references: [id]) // Relation setup
  bookId      Int       // Foreign key to associate with Book
  book        Book      @relation(fields: [bookId], references: [id]) // Relation setup
}
