generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Or your database type
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  avatar    String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  books     Book[]    // One-to-Many relationship: A user can have many books
  bookLikes BookLike[] // Added the reverse relation for BookLike
  savedBooks SaveBook[] // Reverse relation for SaveBook
}

model Book {
  id          Int      @id @default(autoincrement())
  title       String
  genre       String
  pageCount   Int
  description String
  userId      Int      // Foreign key to associate with User
  user        User     @relation(fields: [userId], references: [id]) // Relation setup
  imageUrl    String
  likes       BookLike[] // One-to-Many relationship: A book can have many likes
  savedBy     SaveBook[] // Reverse relation for SaveBook
}

model BookLike {
  id          Int      @id @default(autoincrement())
  userId      Int      // Foreign key to associate with User
  user        User     @relation(fields: [userId], references: [id]) // Relation setup
  bookId      Int      // Foreign key to associate with Book
  book        Book     @relation(fields: [bookId], references: [id]) // Added the reverse relation to Book
  countOfLike Int
  isLiked     Boolean  @default(false)
  @@unique([userId, bookId])
}

model SaveBook {
  id          Int      @id @default(autoincrement())
  userId      Int      // Foreign key to associate with User
  user        User     @relation(fields: [userId], references: [id]) // Relation setup
  bookId      Int      // Foreign key to associate with Book
  book        Book     @relation(fields: [bookId], references: [id]) // Added the reverse relation to Book
  isSaved     Boolean  @default(false)
  @@unique([userId, bookId])
}
